// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source product.go -destination=./mocks/mock_product.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/loungeup/go-loungeup/client/models"
	gomock "go.uber.org/mock/gomock"
)

// MockProductsManager is a mock of ProductsManager interface.
type MockProductsManager struct {
	ctrl     *gomock.Controller
	recorder *MockProductsManagerMockRecorder
	isgomock struct{}
}

// MockProductsManagerMockRecorder is the mock recorder for MockProductsManager.
type MockProductsManagerMockRecorder struct {
	mock *MockProductsManager
}

// NewMockProductsManager creates a new mock instance.
func NewMockProductsManager(ctrl *gomock.Controller) *MockProductsManager {
	mock := &MockProductsManager{ctrl: ctrl}
	mock.recorder = &MockProductsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsManager) EXPECT() *MockProductsManagerMockRecorder {
	return m.recorder
}

// ReadProduct mocks base method.
func (m *MockProductsManager) ReadProduct(selector *models.ProductSelector) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProduct", selector)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProduct indicates an expected call of ReadProduct.
func (mr *MockProductsManagerMockRecorder) ReadProduct(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProduct", reflect.TypeOf((*MockProductsManager)(nil).ReadProduct), selector)
}

// ReadProducts mocks base method.
func (m *MockProductsManager) ReadProducts(selector *models.ProductsSelector) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProducts", selector)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProducts indicates an expected call of ReadProducts.
func (mr *MockProductsManagerMockRecorder) ReadProducts(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProducts", reflect.TypeOf((*MockProductsManager)(nil).ReadProducts), selector)
}
