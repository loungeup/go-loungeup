// Code generated by MockGen. DO NOT EDIT.
// Source: integration.go
//
// Generated by this command:
//
//	mockgen -source integration.go -destination=./mocks/mock_integration.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	json "encoding/json"
	reflect "reflect"

	resprot "github.com/jirenius/go-res/resprot"
	models "github.com/loungeup/go-loungeup/client/models"
	resmodels "github.com/loungeup/go-loungeup/resmodels"
	gomock "go.uber.org/mock/gomock"
)

// MockIntegrationsManager is a mock of IntegrationsManager interface.
type MockIntegrationsManager struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationsManagerMockRecorder
	isgomock struct{}
}

// MockIntegrationsManagerMockRecorder is the mock recorder for MockIntegrationsManager.
type MockIntegrationsManagerMockRecorder struct {
	mock *MockIntegrationsManager
}

// NewMockIntegrationsManager creates a new mock instance.
func NewMockIntegrationsManager(ctrl *gomock.Controller) *MockIntegrationsManager {
	mock := &MockIntegrationsManager{ctrl: ctrl}
	mock.recorder = &MockIntegrationsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegrationsManager) EXPECT() *MockIntegrationsManagerMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockIntegrationsManager) CreateTicket(selector *resmodels.EntityIntegrationSelector, params any) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", selector, params)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockIntegrationsManagerMockRecorder) CreateTicket(selector, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockIntegrationsManager)(nil).CreateTicket), selector, params)
}

// FetchFromProvider mocks base method.
func (m *MockIntegrationsManager) FetchFromProvider(selector *resmodels.EntityIntegrationSelector, params any) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromProvider", selector, params)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFromProvider indicates an expected call of FetchFromProvider.
func (mr *MockIntegrationsManagerMockRecorder) FetchFromProvider(selector, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromProvider", reflect.TypeOf((*MockIntegrationsManager)(nil).FetchFromProvider), selector, params)
}

// FetchLatestEntityIntegrationRoomTypes mocks base method.
func (m *MockIntegrationsManager) FetchLatestEntityIntegrationRoomTypes(selector *resmodels.LatestIntegrationSelector) ([]*models.RoomType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestEntityIntegrationRoomTypes", selector)
	ret0, _ := ret[0].([]*models.RoomType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatestEntityIntegrationRoomTypes indicates an expected call of FetchLatestEntityIntegrationRoomTypes.
func (mr *MockIntegrationsManagerMockRecorder) FetchLatestEntityIntegrationRoomTypes(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestEntityIntegrationRoomTypes", reflect.TypeOf((*MockIntegrationsManager)(nil).FetchLatestEntityIntegrationRoomTypes), selector)
}

// ReadEntityIntegration mocks base method.
func (m *MockIntegrationsManager) ReadEntityIntegration(selector *resmodels.EntityIntegrationSelector) (*resmodels.EntityIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntityIntegration", selector)
	ret0, _ := ret[0].(*resmodels.EntityIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntityIntegration indicates an expected call of ReadEntityIntegration.
func (mr *MockIntegrationsManagerMockRecorder) ReadEntityIntegration(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntityIntegration", reflect.TypeOf((*MockIntegrationsManager)(nil).ReadEntityIntegration), selector)
}

// ReadEntityIntegrations mocks base method.
func (m *MockIntegrationsManager) ReadEntityIntegrations(selector *resmodels.EntityIntegrationsSelector) ([]*resmodels.EntityIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntityIntegrations", selector)
	ret0, _ := ret[0].([]*resmodels.EntityIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntityIntegrations indicates an expected call of ReadEntityIntegrations.
func (mr *MockIntegrationsManagerMockRecorder) ReadEntityIntegrations(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntityIntegrations", reflect.TypeOf((*MockIntegrationsManager)(nil).ReadEntityIntegrations), selector)
}

// ReadIntegration mocks base method.
func (m *MockIntegrationsManager) ReadIntegration(selector *models.IntegrationSelector) (*models.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIntegration", selector)
	ret0, _ := ret[0].(*models.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIntegration indicates an expected call of ReadIntegration.
func (mr *MockIntegrationsManagerMockRecorder) ReadIntegration(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIntegration", reflect.TypeOf((*MockIntegrationsManager)(nil).ReadIntegration), selector)
}

// ReadIntegrations mocks base method.
func (m *MockIntegrationsManager) ReadIntegrations(selector *models.IntegrationsSelector) ([]*models.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIntegrations", selector)
	ret0, _ := ret[0].([]*models.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIntegrations indicates an expected call of ReadIntegrations.
func (mr *MockIntegrationsManagerMockRecorder) ReadIntegrations(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIntegrations", reflect.TypeOf((*MockIntegrationsManager)(nil).ReadIntegrations), selector)
}

// SendToProvider mocks base method.
func (m *MockIntegrationsManager) SendToProvider(selector *resmodels.EntityIntegrationSelector, params any) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToProvider", selector, params)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToProvider indicates an expected call of SendToProvider.
func (mr *MockIntegrationsManagerMockRecorder) SendToProvider(selector, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToProvider", reflect.TypeOf((*MockIntegrationsManager)(nil).SendToProvider), selector, params)
}

// UpdateEntityIntegration mocks base method.
func (m *MockIntegrationsManager) UpdateEntityIntegration(selector *resmodels.EntityIntegrationSelector, params any) (resprot.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityIntegration", selector, params)
	ret0, _ := ret[0].(resprot.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityIntegration indicates an expected call of UpdateEntityIntegration.
func (mr *MockIntegrationsManagerMockRecorder) UpdateEntityIntegration(selector, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityIntegration", reflect.TypeOf((*MockIntegrationsManager)(nil).UpdateEntityIntegration), selector, params)
}
