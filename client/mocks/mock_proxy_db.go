// Code generated by MockGen. DO NOT EDIT.
// Source: proxy_db.go
//
// Generated by this command:
//
//	mockgen -source proxy_db.go -destination=./mocks/mock_proxy_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/loungeup/go-loungeup/client/models"
	gomock "go.uber.org/mock/gomock"
)

// MockProxyDBClient is a mock of ProxyDBClient interface.
type MockProxyDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockProxyDBClientMockRecorder
	isgomock struct{}
}

// MockProxyDBClientMockRecorder is the mock recorder for MockProxyDBClient.
type MockProxyDBClientMockRecorder struct {
	mock *MockProxyDBClient
}

// NewMockProxyDBClient creates a new mock instance.
func NewMockProxyDBClient(ctrl *gomock.Controller) *MockProxyDBClient {
	mock := &MockProxyDBClient{ctrl: ctrl}
	mock.recorder = &MockProxyDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyDBClient) EXPECT() *MockProxyDBClientMockRecorder {
	return m.recorder
}

// ReadBooking mocks base method.
func (m *MockProxyDBClient) ReadBooking(selector *models.BookingSelector) (*models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBooking", selector)
	ret0, _ := ret[0].(*models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBooking indicates an expected call of ReadBooking.
func (mr *MockProxyDBClientMockRecorder) ReadBooking(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBooking", reflect.TypeOf((*MockProxyDBClient)(nil).ReadBooking), selector)
}
