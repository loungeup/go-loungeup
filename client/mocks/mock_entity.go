// Code generated by MockGen. DO NOT EDIT.
// Source: entity.go
//
// Generated by this command:
//
//	mockgen -source entity.go -destination=./mocks/mock_entity.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	json "encoding/json"
	reflect "reflect"

	resmodels "github.com/loungeup/go-loungeup/resmodels"
	gomock "go.uber.org/mock/gomock"
)

// MockEntitiesClient is a mock of EntitiesClient interface.
type MockEntitiesClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntitiesClientMockRecorder
	isgomock struct{}
}

// MockEntitiesClientMockRecorder is the mock recorder for MockEntitiesClient.
type MockEntitiesClientMockRecorder struct {
	mock *MockEntitiesClient
}

// NewMockEntitiesClient creates a new mock instance.
func NewMockEntitiesClient(ctrl *gomock.Controller) *MockEntitiesClient {
	mock := &MockEntitiesClient{ctrl: ctrl}
	mock.recorder = &MockEntitiesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntitiesClient) EXPECT() *MockEntitiesClientMockRecorder {
	return m.recorder
}

// BuildESQueryEntity mocks base method.
func (m *MockEntitiesClient) BuildESQueryEntity(entityID *resmodels.EntityID, params *resmodels.BuildEntityESQueryParams) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildESQueryEntity", entityID, params)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildESQueryEntity indicates an expected call of BuildESQueryEntity.
func (mr *MockEntitiesClientMockRecorder) BuildESQueryEntity(entityID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildESQueryEntity", reflect.TypeOf((*MockEntitiesClient)(nil).BuildESQueryEntity), entityID, params)
}

// PatchEntity mocks base method.
func (m *MockEntitiesClient) PatchEntity(selector *resmodels.EntityID, updates *resmodels.EntityUpdates) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchEntity", selector, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchEntity indicates an expected call of PatchEntity.
func (mr *MockEntitiesClientMockRecorder) PatchEntity(selector, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchEntity", reflect.TypeOf((*MockEntitiesClient)(nil).PatchEntity), selector, updates)
}

// ReadAccountParents mocks base method.
func (m *MockEntitiesClient) ReadAccountParents(selector *resmodels.EntityID) ([]*resmodels.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccountParents", selector)
	ret0, _ := ret[0].([]*resmodels.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccountParents indicates an expected call of ReadAccountParents.
func (mr *MockEntitiesClientMockRecorder) ReadAccountParents(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccountParents", reflect.TypeOf((*MockEntitiesClient)(nil).ReadAccountParents), selector)
}

// ReadEntity mocks base method.
func (m *MockEntitiesClient) ReadEntity(selector *resmodels.EntityID) (*resmodels.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntity", selector)
	ret0, _ := ret[0].(*resmodels.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntity indicates an expected call of ReadEntity.
func (mr *MockEntitiesClientMockRecorder) ReadEntity(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntity", reflect.TypeOf((*MockEntitiesClient)(nil).ReadEntity), selector)
}

// ReadEntityAccounts mocks base method.
func (m *MockEntitiesClient) ReadEntityAccounts(selector *resmodels.EntityAccountsSelector) ([]*resmodels.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntityAccounts", selector)
	ret0, _ := ret[0].([]*resmodels.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntityAccounts indicates an expected call of ReadEntityAccounts.
func (mr *MockEntitiesClientMockRecorder) ReadEntityAccounts(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntityAccounts", reflect.TypeOf((*MockEntitiesClient)(nil).ReadEntityAccounts), selector)
}

// ReadEntityCustomFields mocks base method.
func (m *MockEntitiesClient) ReadEntityCustomFields(selector *resmodels.EntityCustomFieldsSelector) (*resmodels.EntityCustomFields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntityCustomFields", selector)
	ret0, _ := ret[0].(*resmodels.EntityCustomFields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntityCustomFields indicates an expected call of ReadEntityCustomFields.
func (mr *MockEntitiesClientMockRecorder) ReadEntityCustomFields(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntityCustomFields", reflect.TypeOf((*MockEntitiesClient)(nil).ReadEntityCustomFields), selector)
}
