// Code generated by MockGen. DO NOT EDIT.
// Source: booking.go
//
// Generated by this command:
//
//	mockgen -source booking.go -destination=./mocks/mock_booking.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/loungeup/go-loungeup/client/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBookingsManager is a mock of BookingsManager interface.
type MockBookingsManager struct {
	ctrl     *gomock.Controller
	recorder *MockBookingsManagerMockRecorder
	isgomock struct{}
}

// MockBookingsManagerMockRecorder is the mock recorder for MockBookingsManager.
type MockBookingsManagerMockRecorder struct {
	mock *MockBookingsManager
}

// NewMockBookingsManager creates a new mock instance.
func NewMockBookingsManager(ctrl *gomock.Controller) *MockBookingsManager {
	mock := &MockBookingsManager{ctrl: ctrl}
	mock.recorder = &MockBookingsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingsManager) EXPECT() *MockBookingsManagerMockRecorder {
	return m.recorder
}

// CountBookings mocks base method.
func (m *MockBookingsManager) CountBookings(entityID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBookings", entityID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBookings indicates an expected call of CountBookings.
func (mr *MockBookingsManagerMockRecorder) CountBookings(entityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBookings", reflect.TypeOf((*MockBookingsManager)(nil).CountBookings), entityID)
}

// IndexBooking mocks base method.
func (m *MockBookingsManager) IndexBooking(request *models.IndexBookingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexBooking", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexBooking indicates an expected call of IndexBooking.
func (mr *MockBookingsManagerMockRecorder) IndexBooking(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexBooking", reflect.TypeOf((*MockBookingsManager)(nil).IndexBooking), request)
}

// ReadBookingIDs mocks base method.
func (m *MockBookingsManager) ReadBookingIDs(selector *models.BookingIDsSelector) (models.ReadBookingIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBookingIDs", selector)
	ret0, _ := ret[0].(models.ReadBookingIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBookingIDs indicates an expected call of ReadBookingIDs.
func (mr *MockBookingsManagerMockRecorder) ReadBookingIDs(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBookingIDs", reflect.TypeOf((*MockBookingsManager)(nil).ReadBookingIDs), selector)
}

// ReadIndexableBookingByID mocks base method.
func (m *MockBookingsManager) ReadIndexableBookingByID(bookingID int) (*models.IndexableBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIndexableBookingByID", bookingID)
	ret0, _ := ret[0].(*models.IndexableBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIndexableBookingByID indicates an expected call of ReadIndexableBookingByID.
func (mr *MockBookingsManagerMockRecorder) ReadIndexableBookingByID(bookingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIndexableBookingByID", reflect.TypeOf((*MockBookingsManager)(nil).ReadIndexableBookingByID), bookingID)
}

// Search mocks base method.
func (m *MockBookingsManager) Search(entityID uuid.UUID, selector models.SearchBookingsRequest) (*models.SearchBookingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", entityID, selector)
	ret0, _ := ret[0].(*models.SearchBookingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockBookingsManagerMockRecorder) Search(entityID, selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockBookingsManager)(nil).Search), entityID, selector)
}
