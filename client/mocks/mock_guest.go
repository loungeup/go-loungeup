// Code generated by MockGen. DO NOT EDIT.
// Source: guest.go
//
// Generated by this command:
//
//	mockgen -source guest.go -destination=./mocks/mock_guest.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	client "github.com/loungeup/go-loungeup/client"
	models "github.com/loungeup/go-loungeup/client/models"
	resresultsets "github.com/loungeup/go-loungeup/resresultsets"
	gomock "go.uber.org/mock/gomock"
)

// MockGuestsClient is a mock of GuestsClient interface.
type MockGuestsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGuestsClientMockRecorder
	isgomock struct{}
}

// MockGuestsClientMockRecorder is the mock recorder for MockGuestsClient.
type MockGuestsClientMockRecorder struct {
	mock *MockGuestsClient
}

// NewMockGuestsClient creates a new mock instance.
func NewMockGuestsClient(ctrl *gomock.Controller) *MockGuestsClient {
	mock := &MockGuestsClient{ctrl: ctrl}
	mock.recorder = &MockGuestsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuestsClient) EXPECT() *MockGuestsClientMockRecorder {
	return m.recorder
}

// AnonymizeGuests mocks base method.
func (m *MockGuestsClient) AnonymizeGuests(entityID uuid.UUID, guestIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnonymizeGuests", entityID, guestIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnonymizeGuests indicates an expected call of AnonymizeGuests.
func (mr *MockGuestsClientMockRecorder) AnonymizeGuests(entityID, guestIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnonymizeGuests", reflect.TypeOf((*MockGuestsClient)(nil).AnonymizeGuests), entityID, guestIDs)
}

// CountGuests mocks base method.
func (m *MockGuestsClient) CountGuests(entityID uuid.UUID, request *models.SearchGuestsRequest) (*models.CountGuestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountGuests", entityID, request)
	ret0, _ := ret[0].(*models.CountGuestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountGuests indicates an expected call of CountGuests.
func (mr *MockGuestsClientMockRecorder) CountGuests(entityID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountGuests", reflect.TypeOf((*MockGuestsClient)(nil).CountGuests), entityID, request)
}

// ReadOne mocks base method.
func (m *MockGuestsClient) ReadOne(selector *client.GuestSelector) (*models.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOne", selector)
	ret0, _ := ret[0].(*models.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOne indicates an expected call of ReadOne.
func (mr *MockGuestsClientMockRecorder) ReadOne(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOne", reflect.TypeOf((*MockGuestsClient)(nil).ReadOne), selector)
}

// SearchByContact mocks base method.
func (m *MockGuestsClient) SearchByContact(selector *models.SearchByContactSelector) (*resresultsets.KeysetPaginationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByContact", selector)
	ret0, _ := ret[0].(*resresultsets.KeysetPaginationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByContact indicates an expected call of SearchByContact.
func (mr *MockGuestsClientMockRecorder) SearchByContact(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByContact", reflect.TypeOf((*MockGuestsClient)(nil).SearchByContact), selector)
}
