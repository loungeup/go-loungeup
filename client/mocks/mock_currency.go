// Code generated by MockGen. DO NOT EDIT.
// Source: currency.go
//
// Generated by this command:
//
//	mockgen -source currency.go -destination=./mocks/mock_currency.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/loungeup/go-loungeup/client/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCurrencyManager is a mock of CurrencyManager interface.
type MockCurrencyManager struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyManagerMockRecorder
	isgomock struct{}
}

// MockCurrencyManagerMockRecorder is the mock recorder for MockCurrencyManager.
type MockCurrencyManagerMockRecorder struct {
	mock *MockCurrencyManager
}

// NewMockCurrencyManager creates a new mock instance.
func NewMockCurrencyManager(ctrl *gomock.Controller) *MockCurrencyManager {
	mock := &MockCurrencyManager{ctrl: ctrl}
	mock.recorder = &MockCurrencyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyManager) EXPECT() *MockCurrencyManagerMockRecorder {
	return m.recorder
}

// ReadCurrencyRates mocks base method.
func (m *MockCurrencyManager) ReadCurrencyRates(selector *models.CurrencyRatesSelector) (*models.CurrencyRates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCurrencyRates", selector)
	ret0, _ := ret[0].(*models.CurrencyRates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCurrencyRates indicates an expected call of ReadCurrencyRates.
func (mr *MockCurrencyManagerMockRecorder) ReadCurrencyRates(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCurrencyRates", reflect.TypeOf((*MockCurrencyManager)(nil).ReadCurrencyRates), selector)
}
