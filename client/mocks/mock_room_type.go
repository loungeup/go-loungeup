// Code generated by MockGen. DO NOT EDIT.
// Source: room_type.go
//
// Generated by this command:
//
//	mockgen -source room_type.go -destination=./mocks/mock_room_type.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/loungeup/go-loungeup/client/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomTypesManager is a mock of RoomTypesManager interface.
type MockRoomTypesManager struct {
	ctrl     *gomock.Controller
	recorder *MockRoomTypesManagerMockRecorder
	isgomock struct{}
}

// MockRoomTypesManagerMockRecorder is the mock recorder for MockRoomTypesManager.
type MockRoomTypesManagerMockRecorder struct {
	mock *MockRoomTypesManager
}

// NewMockRoomTypesManager creates a new mock instance.
func NewMockRoomTypesManager(ctrl *gomock.Controller) *MockRoomTypesManager {
	mock := &MockRoomTypesManager{ctrl: ctrl}
	mock.recorder = &MockRoomTypesManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomTypesManager) EXPECT() *MockRoomTypesManagerMockRecorder {
	return m.recorder
}

// ReadRoomTypes mocks base method.
func (m *MockRoomTypesManager) ReadRoomTypes(selector *models.RoomTypesSelector) ([]*models.RoomType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRoomTypes", selector)
	ret0, _ := ret[0].([]*models.RoomType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRoomTypes indicates an expected call of ReadRoomTypes.
func (mr *MockRoomTypesManagerMockRecorder) ReadRoomTypes(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRoomTypes", reflect.TypeOf((*MockRoomTypesManager)(nil).ReadRoomTypes), selector)
}
