// Code generated by MockGen. DO NOT EDIT.
// Source: segment.go
//
// Generated by this command:
//
//	mockgen -source segment.go -destination=./mocks/mock_segment.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/loungeup/go-loungeup/client/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSegmentsClient is a mock of SegmentsClient interface.
type MockSegmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentsClientMockRecorder
	isgomock struct{}
}

// MockSegmentsClientMockRecorder is the mock recorder for MockSegmentsClient.
type MockSegmentsClientMockRecorder struct {
	mock *MockSegmentsClient
}

// NewMockSegmentsClient creates a new mock instance.
func NewMockSegmentsClient(ctrl *gomock.Controller) *MockSegmentsClient {
	mock := &MockSegmentsClient{ctrl: ctrl}
	mock.recorder = &MockSegmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentsClient) EXPECT() *MockSegmentsClientMockRecorder {
	return m.recorder
}

// BuildESQuery mocks base method.
func (m *MockSegmentsClient) BuildESQuery(selector *models.SegmentSelector, params *models.SearchCriterion) (*models.BuildSegmentESQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildESQuery", selector, params)
	ret0, _ := ret[0].(*models.BuildSegmentESQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildESQuery indicates an expected call of BuildESQuery.
func (mr *MockSegmentsClientMockRecorder) BuildESQuery(selector, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildESQuery", reflect.TypeOf((*MockSegmentsClient)(nil).BuildESQuery), selector, params)
}
