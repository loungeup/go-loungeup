// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source cache.go -destination=./mocks/cache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReader) Read(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockReaderMockRecorder) Read(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReader)(nil).Read), key)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
	isgomock struct{}
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockWriter) Write(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", key, value)
}

// Write indicates an expected call of Write.
func (mr *MockWriterMockRecorder) Write(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), key, value)
}

// WriteWithDuration mocks base method.
func (m *MockWriter) WriteWithDuration(key string, value any, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteWithDuration", key, value, duration)
}

// WriteWithDuration indicates an expected call of WriteWithDuration.
func (mr *MockWriterMockRecorder) WriteWithDuration(key, value, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWithDuration", reflect.TypeOf((*MockWriter)(nil).WriteWithDuration), key, value, duration)
}

// MockReadWriter is a mock of ReadWriter interface.
type MockReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriterMockRecorder
	isgomock struct{}
}

// MockReadWriterMockRecorder is the mock recorder for MockReadWriter.
type MockReadWriterMockRecorder struct {
	mock *MockReadWriter
}

// NewMockReadWriter creates a new mock instance.
func NewMockReadWriter(ctrl *gomock.Controller) *MockReadWriter {
	mock := &MockReadWriter{ctrl: ctrl}
	mock.recorder = &MockReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriter) EXPECT() *MockReadWriterMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReadWriter) Read(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockReadWriterMockRecorder) Read(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriter)(nil).Read), key)
}

// Write mocks base method.
func (m *MockReadWriter) Write(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", key, value)
}

// Write indicates an expected call of Write.
func (mr *MockReadWriterMockRecorder) Write(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriter)(nil).Write), key, value)
}

// WriteWithDuration mocks base method.
func (m *MockReadWriter) WriteWithDuration(key string, value any, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteWithDuration", key, value, duration)
}

// WriteWithDuration indicates an expected call of WriteWithDuration.
func (mr *MockReadWriterMockRecorder) WriteWithDuration(key, value, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWithDuration", reflect.TypeOf((*MockReadWriter)(nil).WriteWithDuration), key, value, duration)
}
